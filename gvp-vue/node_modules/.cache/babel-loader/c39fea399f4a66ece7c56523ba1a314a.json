{"ast":null,"code":"import storageService from '@/service/storageService';\nconst userModule = {\n  namespaced: true,\n  state: {\n    token: storageService.get(storageService.USER_TOKEN),\n    userInfo: JSON.parse(storageService.get(storageService.USER_INFO))\n  },\n  mutations: {\n    SET_TOKEN(state, token) {\n      storageService.set(storageService.USER_TOKEN, token);\n      state.token = token;\n    },\n    SET_USERINFO(state, userInfo) {\n      storageService.set(storageService.USER_INFO, JSON.stringify(userInfo));\n      state.userInfo = userInfo;\n    }\n  },\n  actions: {\n    register() {\n      return new Promise();\n      userService.register(this.user).then(res => {\n        this.SET_TOKEN(res.data.data.token);\n        return userService.info();\n      }).then(response => {\n        this.SET_USERINFO(response.data.data.user);\n        this.$router.replace({\n          name: 'home'\n        });\n      }).catch(error => {\n        Promise.reject(error);\n      });\n    }\n  }\n};\nexport default {\n  ...userModule\n};","map":{"version":3,"names":["storageService","userModule","namespaced","state","token","get","USER_TOKEN","userInfo","JSON","parse","USER_INFO","mutations","SET_TOKEN","set","SET_USERINFO","stringify","actions","register","Promise","userService","user","then","res","data","info","response","$router","replace","name","catch","error","reject"],"sources":["/home/maruka/Projects/go-web/gvp-f/src/store/module/user.js"],"sourcesContent":["import storageService from '@/service/storageService';\n\nconst userModule = {\n  namespaced: true,\n  state: {\n    token: storageService.get(storageService.USER_TOKEN),\n    userInfo: JSON.parse(storageService.get(storageService.USER_INFO)),\n  },\n  mutations: {\n    SET_TOKEN(state, token) {\n      storageService.set(storageService.USER_TOKEN, token);\n      state.token = token;\n    },\n    SET_USERINFO(state, userInfo) {\n      storageService.set(storageService.USER_INFO, JSON.stringify(userInfo));\n      state.userInfo = userInfo;\n    },\n  },\n  actions: {\n    register() {\n        return new Promise\n      userService.register(this.user).then((res) => {\n        this.SET_TOKEN(res.data.data.token);\n        return userService.info();\n      }).then((response) => {\n        this.SET_USERINFO(response.data.data.user);\n        this.$router.replace({ name: 'home' });\n      }).catch((error) => {\n        Promise.reject(error);\n      });\n    },\n  },\n};\n\nexport default {\n  ...userModule,\n};\n"],"mappings":"AAAA,OAAOA,cAAc,MAAM,0BAA0B;AAErD,MAAMC,UAAU,GAAG;EACjBC,UAAU,EAAE,IAAI;EAChBC,KAAK,EAAE;IACLC,KAAK,EAAEJ,cAAc,CAACK,GAAG,CAACL,cAAc,CAACM,UAAU,CAAC;IACpDC,QAAQ,EAAEC,IAAI,CAACC,KAAK,CAACT,cAAc,CAACK,GAAG,CAACL,cAAc,CAACU,SAAS,CAAC;EACnE,CAAC;EACDC,SAAS,EAAE;IACTC,SAAS,CAACT,KAAK,EAAEC,KAAK,EAAE;MACtBJ,cAAc,CAACa,GAAG,CAACb,cAAc,CAACM,UAAU,EAAEF,KAAK,CAAC;MACpDD,KAAK,CAACC,KAAK,GAAGA,KAAK;IACrB,CAAC;IACDU,YAAY,CAACX,KAAK,EAAEI,QAAQ,EAAE;MAC5BP,cAAc,CAACa,GAAG,CAACb,cAAc,CAACU,SAAS,EAAEF,IAAI,CAACO,SAAS,CAACR,QAAQ,CAAC,CAAC;MACtEJ,KAAK,CAACI,QAAQ,GAAGA,QAAQ;IAC3B;EACF,CAAC;EACDS,OAAO,EAAE;IACPC,QAAQ,GAAG;MACP,OAAO,IAAIC,OAAO;MACpBC,WAAW,CAACF,QAAQ,CAAC,IAAI,CAACG,IAAI,CAAC,CAACC,IAAI,CAAEC,GAAG,IAAK;QAC5C,IAAI,CAACV,SAAS,CAACU,GAAG,CAACC,IAAI,CAACA,IAAI,CAACnB,KAAK,CAAC;QACnC,OAAOe,WAAW,CAACK,IAAI,EAAE;MAC3B,CAAC,CAAC,CAACH,IAAI,CAAEI,QAAQ,IAAK;QACpB,IAAI,CAACX,YAAY,CAACW,QAAQ,CAACF,IAAI,CAACA,IAAI,CAACH,IAAI,CAAC;QAC1C,IAAI,CAACM,OAAO,CAACC,OAAO,CAAC;UAAEC,IAAI,EAAE;QAAO,CAAC,CAAC;MACxC,CAAC,CAAC,CAACC,KAAK,CAAEC,KAAK,IAAK;QAClBZ,OAAO,CAACa,MAAM,CAACD,KAAK,CAAC;MACvB,CAAC,CAAC;IACJ;EACF;AACF,CAAC;AAED,eAAe;EACb,GAAG7B;AACL,CAAC"},"metadata":{},"sourceType":"module"}