{"ast":null,"code":"import storageService from '@/service/storageService';\nimport userService from '@/service/userService';\nconst userModule = {\n  namespaced: true,\n  state: {\n    token: storageService.get(storageService.USER_TOKEN),\n    userInfo: JSON.parse(storageService.get(storageService.USER_INFO))\n  },\n  mutations: {\n    SET_TOKEN(state, token) {\n      storageService.set(storageService.USER_TOKEN, token);\n      state.token = token;\n    },\n    SET_USERINFO(state, userInfo) {\n      storageService.set(storageService.USER_INFO, JSON.stringify(userInfo));\n      state.userInfo = userInfo;\n    }\n  },\n  actions: {\n    register(context, {\n      name,\n      telephone,\n      password\n    }) {\n      return new Promise((resolve, reject) => {\n        userService.register({\n          name,\n          telephone,\n          password\n        }).then(res => {\n          context.commit('SET_TOKEN', res.data.data.token);\n          return userService.info();\n        }).then(res => {\n          context.commit('SET_USERINFO', res.data.data.user);\n          resolve(res);\n        }).catch(error => {\n          reject(error);\n        });\n      });\n    },\n    login(context, {\n      telephone,\n      password\n    }) {\n      return new Promise((resolve, reject) => {\n        userService.login({\n          telephone,\n          password\n        }).then(res => {\n          context.commit('SET_TOKEN', res.data.data.token);\n          return userService.info();\n        }).then(res => {\n          context.commit('SET_USERINFO', res.data.data.user);\n          resolve(res);\n        }).catch(error => {\n          reject(error);\n        });\n      });\n    },\n    logout({\n      context\n    }) {\n      commit('SET_TOKEN', '');\n      context.commit('SET_USERINFO', '');\n    }\n  }\n};\nexport default {\n  ...userModule\n};","map":{"version":3,"names":["storageService","userService","userModule","namespaced","state","token","get","USER_TOKEN","userInfo","JSON","parse","USER_INFO","mutations","SET_TOKEN","set","SET_USERINFO","stringify","actions","register","context","name","telephone","password","Promise","resolve","reject","then","res","commit","data","info","user","catch","error","login","logout"],"sources":["/home/maruka/Projects/go-web/gvp-f/src/store/module/user.js"],"sourcesContent":["import storageService from '@/service/storageService';\nimport userService from '@/service/userService';\n\nconst userModule = {\n  namespaced: true,\n  state: {\n    token: storageService.get(storageService.USER_TOKEN),\n    userInfo: JSON.parse(storageService.get(storageService.USER_INFO)),\n  },\n  mutations: {\n    SET_TOKEN(state, token) {\n      storageService.set(storageService.USER_TOKEN, token);\n      state.token = token;\n    },\n    SET_USERINFO(state, userInfo) {\n      storageService.set(storageService.USER_INFO, JSON.stringify(userInfo));\n      state.userInfo = userInfo;\n    },\n  },\n  actions: {\n    register(context, { name, telephone, password }) {\n      return new Promise((resolve, reject) => {\n        userService.register({ name, telephone, password }).then((res) => {\n          context.commit('SET_TOKEN', res.data.data.token);\n          return userService.info();\n        }).then((res) => {\n          context.commit('SET_USERINFO', res.data.data.user);\n          resolve(res);\n        }).catch((error) => {\n          reject(error);\n        });\n      });\n    },\n    login(context, { telephone, password }) {\n      return new Promise((resolve, reject) => {\n        userService.login({ telephone, password }).then((res) => {\n          context.commit('SET_TOKEN', res.data.data.token);\n          return userService.info();\n        }).then((res) => {\n          context.commit('SET_USERINFO', res.data.data.user);\n          resolve(res);\n        }).catch((error) => {\n          reject(error);\n        });\n      });\n    },\n    logout({ context }) {\n      commit('SET_TOKEN', '');\n      context.commit('SET_USERINFO', '');\n    },\n  },\n};\n\nexport default {\n  ...userModule,\n};\n"],"mappings":"AAAA,OAAOA,cAAc,MAAM,0BAA0B;AACrD,OAAOC,WAAW,MAAM,uBAAuB;AAE/C,MAAMC,UAAU,GAAG;EACjBC,UAAU,EAAE,IAAI;EAChBC,KAAK,EAAE;IACLC,KAAK,EAAEL,cAAc,CAACM,GAAG,CAACN,cAAc,CAACO,UAAU,CAAC;IACpDC,QAAQ,EAAEC,IAAI,CAACC,KAAK,CAACV,cAAc,CAACM,GAAG,CAACN,cAAc,CAACW,SAAS,CAAC;EACnE,CAAC;EACDC,SAAS,EAAE;IACTC,SAAS,CAACT,KAAK,EAAEC,KAAK,EAAE;MACtBL,cAAc,CAACc,GAAG,CAACd,cAAc,CAACO,UAAU,EAAEF,KAAK,CAAC;MACpDD,KAAK,CAACC,KAAK,GAAGA,KAAK;IACrB,CAAC;IACDU,YAAY,CAACX,KAAK,EAAEI,QAAQ,EAAE;MAC5BR,cAAc,CAACc,GAAG,CAACd,cAAc,CAACW,SAAS,EAAEF,IAAI,CAACO,SAAS,CAACR,QAAQ,CAAC,CAAC;MACtEJ,KAAK,CAACI,QAAQ,GAAGA,QAAQ;IAC3B;EACF,CAAC;EACDS,OAAO,EAAE;IACPC,QAAQ,CAACC,OAAO,EAAE;MAAEC,IAAI;MAAEC,SAAS;MAAEC;IAAS,CAAC,EAAE;MAC/C,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;QACtCxB,WAAW,CAACiB,QAAQ,CAAC;UAAEE,IAAI;UAAEC,SAAS;UAAEC;QAAS,CAAC,CAAC,CAACI,IAAI,CAAEC,GAAG,IAAK;UAChER,OAAO,CAACS,MAAM,CAAC,WAAW,EAAED,GAAG,CAACE,IAAI,CAACA,IAAI,CAACxB,KAAK,CAAC;UAChD,OAAOJ,WAAW,CAAC6B,IAAI,EAAE;QAC3B,CAAC,CAAC,CAACJ,IAAI,CAAEC,GAAG,IAAK;UACfR,OAAO,CAACS,MAAM,CAAC,cAAc,EAAED,GAAG,CAACE,IAAI,CAACA,IAAI,CAACE,IAAI,CAAC;UAClDP,OAAO,CAACG,GAAG,CAAC;QACd,CAAC,CAAC,CAACK,KAAK,CAAEC,KAAK,IAAK;UAClBR,MAAM,CAACQ,KAAK,CAAC;QACf,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ,CAAC;IACDC,KAAK,CAACf,OAAO,EAAE;MAAEE,SAAS;MAAEC;IAAS,CAAC,EAAE;MACtC,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;QACtCxB,WAAW,CAACiC,KAAK,CAAC;UAAEb,SAAS;UAAEC;QAAS,CAAC,CAAC,CAACI,IAAI,CAAEC,GAAG,IAAK;UACvDR,OAAO,CAACS,MAAM,CAAC,WAAW,EAAED,GAAG,CAACE,IAAI,CAACA,IAAI,CAACxB,KAAK,CAAC;UAChD,OAAOJ,WAAW,CAAC6B,IAAI,EAAE;QAC3B,CAAC,CAAC,CAACJ,IAAI,CAAEC,GAAG,IAAK;UACfR,OAAO,CAACS,MAAM,CAAC,cAAc,EAAED,GAAG,CAACE,IAAI,CAACA,IAAI,CAACE,IAAI,CAAC;UAClDP,OAAO,CAACG,GAAG,CAAC;QACd,CAAC,CAAC,CAACK,KAAK,CAAEC,KAAK,IAAK;UAClBR,MAAM,CAACQ,KAAK,CAAC;QACf,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ,CAAC;IACDE,MAAM,CAAC;MAAEhB;IAAQ,CAAC,EAAE;MAClBS,MAAM,CAAC,WAAW,EAAE,EAAE,CAAC;MACvBT,OAAO,CAACS,MAAM,CAAC,cAAc,EAAE,EAAE,CAAC;IACpC;EACF;AACF,CAAC;AAED,eAAe;EACb,GAAG1B;AACL,CAAC"},"metadata":{},"sourceType":"module"}